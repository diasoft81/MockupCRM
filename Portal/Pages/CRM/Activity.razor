@page "/activity"

@layout WebLayout

@using System.Globalization

@inject IJSRuntime JS

<div class="container full-screen">
    <h2 class="text-primary mb-4">Calender</h2>

    <div class="task-form">
        <div class="form-row">
            <div class="form-group">
                <label>Activity Title</label>
                <input type="text" @bind="activityTitle" />
            </div>
            <div class="form-group">
                <label>Date</label>
                <input type="date" @bind="activityDate" />
            </div>
        </div>
        <button class="button" @onclick="AddActivity">Add Activity</button>
    </div>

    <div class="calendar full-width-dialog">
        <div class="table-responsive">
            <table class="table table-bordered table-striped bg-white shadow-sm">
                <thead class="bg-primary text-white">
                    <tr>
                        @foreach (var day in daysOfWeek)
                        {
                            <th>@day</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var week in calendar)
                    {
                        <tr>
                            @foreach (var day in week)
                            {
                                <td class="align-top" style="height: 120px;">
                                    <strong>@day.Day</strong>
                                    <ul style="list-style-type: none; padding-left: 0;">
                                        @foreach (var activity in GetActivitiesForDate(day))
                                        {
                                            <li>@activity</li>
                                        }
                                    </ul>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private string activityTitle;
    private DateTime activityDate = DateTime.Today;
    private List<(DateTime date, string title)> activities = new();

    private List<List<DateTime>> calendar = new();
    private string[] daysOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;

    protected override void OnInitialized()
    {
        GenerateCalendar(DateTime.Today);
    }

    private void GenerateCalendar(DateTime referenceDate)
    {
        calendar.Clear();
        var firstDay = new DateTime(referenceDate.Year, referenceDate.Month, 1);
        var current = firstDay.AddDays(-(int)firstDay.DayOfWeek);

        for (int week = 0; week < 6; week++)
        {
            var weekRow = new List<DateTime>();
            for (int day = 0; day < 7; day++)
            {
                weekRow.Add(current);
                current = current.AddDays(1);
            }
            calendar.Add(weekRow);
        }
    }

    private void AddActivity()
    {
        if (!string.IsNullOrWhiteSpace(activityTitle))
        {
            activities.Add((activityDate, activityTitle));
            activityTitle = string.Empty;
            activityDate = DateTime.Today;
        }
    }

    private IEnumerable<string> GetActivitiesForDate(DateTime date)
    {
        return activities
            .Where(a => a.date.Date == date.Date)
            .Select(a => a.title);
    }
}
