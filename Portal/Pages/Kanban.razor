@page "/kanban/{pipeline?}"
@using CoreNET.Blazor.Shared.Helper
@using Portal.Model
@using Portal.Pages.CRM
@using System.Text.Json
@using CoreNET.Lib.Models.Kanban

@layout WebLayout
@inject IJSRuntime JS
@inject IDialogService DialogService

<MudToolBar Class="mud-toolbar mud-toolbar-gutters custom_toolbar custom_toolbar2">
    @if (IsMobile != true)
    {
        <MudText Typo="Typo.h5" Style="color:white; cursor: pointer;" @onclick="@(() => Navigation.NavigateTo("/"))">
            @((pipeline == "sales") ? "Sales" : "Delivery") Kanban Board
        </MudText>
    }

    <MudSpacer /> <!-- Ini akan mendorong elemen berikut ke kanan -->

    @*     <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" OnClick="@ResetFilters">
        Reset
    </MudButton> *@
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@ExportChart">
        Export
    </MudButton>
</MudToolBar>

<div class="full-width-page">
    <div class="mb-4 mt-3">
        @if (IsMobile == true)
        {
            <h2>@((pipeline == "sales") ? "Sales" : "Delivery") Kanban Board</h2>
        }
        <p>Use this Kanban view to monitor and move @((pipeline == "sales") ? "leads" : "customers") between stages of the sales process.</p>
        <button class="button" @onclick="AddLead"><i class="fas fa-plus"></i> Add @((pipeline == "sales") ? "Lead" : "Work Order")</button>
    </div>

    <div class="row g-3">
        @foreach (var stage in Stages)
        {
            <div class="col-12 col-md-2">
                <div class="kanban-column" id="@stage.ToLower().Replace(" ", "-")">
                    <MudTooltip Text="Click for detail info!">
                        <div class="kanban-stage-header" style="background-color:@GetStageDetailColor(stage)" @onclick="() => ShowStageDetailPopup(stage)">
                            @stage
                        </div>
                    </MudTooltip>
                </div>
                <div class="kanban-cards">
                    @foreach (var lead in Leads.Where(l => l.Stage == stage))
                    {
                        <div class="task-card @GetStatusClass(lead)" @onclick="() => ShowLeadDetailPopup(lead)">
                            <strong>@lead.CompanyShortName</strong>
                            <div class="task-meta mt-2">
                                <span>@lead.CompanyName</span>
                                <span>@lead.Status</span>
                            </div>
                        </div>
                    }

                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Parameter] public string pipeline { get; set; }
    private List<KanbanStageInfo> StageInfos;

    public bool? IsMobile { get; private set; }
    private string[] Stages
    {
        get
        {
            var stages = StageInfos?.Where(s => s.Type == pipeline).Select(s => s.Title).ToArray();
            if (stages == null || stages.Length == 0)
            {
                stages = new string[] { "New" };
            }
            return stages;
        }
    }

    List<LeadItem> Leads
    {
        get
        {
            if (pipeline == "sales")
            {
                return new()
                    {
                        new LeadItem("PT 1", "Perusahaan A", "New"),
                        new LeadItem("PT 2", "Perusahaan B", "New"),
                        new LeadItem("PT 3", "Perusahaan C", "Qualified"),
                        new LeadItem("PT 4", "Perusahaan D", "Negotiation"),
                        new LeadItem("PT 5", "Perusahaan E", "Lost"),
                        new LeadItem("PT 6", "Perusahaan F", "Survey"),
                        new LeadItem("PT 7", "Perusahaan G", "Won"),
                        new LeadItem("PT 8", "Perusahaan A", "New"),
                        new LeadItem("PT 9", "Perusahaan B", "New"),
                        new LeadItem("PT 10", "Perusahaan C", "Qualified"),
                        new LeadItem("PT 11", "Perusahaan D", "Negotiation"),
                        new LeadItem("PT 12", "Perusahaan E", "Lost"),
                        new LeadItem("PT 13", "Perusahaan F", "Survey"),
                        new LeadItem("PT 14", "Perusahaan G", "Won"),
                        new LeadItem("PT 15", "Perusahaan A", "New"),
                        new LeadItem("PT 16", "Perusahaan B", "New"),
                        new LeadItem("PT 17", "Perusahaan A", "New"),
                        new LeadItem("PT 18", "Perusahaan B", "New")
                    };
            }
            else
            {
                return new()
                    {
                        new LeadItem("PT 1", "Perusahaan A", "New"),
                        new LeadItem("PT 2", "Perusahaan B", "In Progress"),
                        new LeadItem("PT 3", "Perusahaan C", "Preparation"),
                        new LeadItem("PT 4", "Perusahaan D", "Ready to Go"),
                        new LeadItem("PT 5", "Perusahaan E", "In Progress"),
                        new LeadItem("PT 6", "Perusahaan F", "Testing"),
                        new LeadItem("PT 7", "Perusahaan G", "Done")
                    };
            }

        }
    }

    string GetStatusClass(LeadItem lead) =>
        lead.Status == "Done" ? "done" :
        lead.Status == "Overdue" ? "overdue" : "";

    DotNetObjectReference<Kanban>? objRef;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsMobile = await JSRuntime.InvokeAsync<bool>("isMobile");

        var json = await Http.GetStringAsync("/data/kanban_stages_en.json");

        StageInfos = JsonSerializer.Deserialize<List<KanbanStageInfo>>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            }) ?? new List<KanbanStageInfo>();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("kanbanInterop.initSortable", objRef);
        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task ShowStageDetailPopup(string stage)
    {
        var info = StageInfos?.FirstOrDefault(s => s.Type == pipeline && s.Title == stage);
        await DialogService.ShowAsync<Portal.Components.StageDetailDialog>("Stage Info", new DialogParameters { ["Stage"] = info.Description });
    }

    private async Task ShowLeadDetailPopup(LeadItem lead)
    {
        await OnMoveLeadClicked(lead, "Edit Lead", lead.Stage);

        // var info = StageInfos?.FirstOrDefault(s => s.Type == pipeline && s.Title == stage);
        // await DialogService.ShowAsync<Portal.Components.StageDetailDialog>("PT Info", new DialogParameters { ["Stage"] = info.Description });
    }

    private string GetStageDetailColor(string stage)
    {
        var info = StageInfos?.FirstOrDefault(s => s.Type == pipeline && s.Title == stage);
        return info?.Color ?? "000000";
    }
    [JSInvokable]
    public async Task OnLeadMoved(string title, string newStage, string oldColumnId, int oldIndex)
    {
        var lead = Leads.FirstOrDefault(l => l.ContactMobile == title);
        if (lead != null && lead.Stage != newStage)
        {
            await OnMoveLeadClicked(lead, title, newStage, oldColumnId, oldIndex);
        }
    }

    async Task AddLead()
    {
        if (pipeline == "sales")
        {
            var options = new DialogOptions()
                {
                    MaxWidth = MaxWidth.False, // atau MaxWidth.Large
                    FullWidth = true,
                    CloseButton = false,
                    BackdropClick = false,
                    FullScreen = true,
                    BackgroundClass = "full-width-dialog"
                };
            var parameters = new DialogParameters { ["Title"] = "New Lead", ["IsMobile"] = IsMobile };
            var dialog = await DialogService.ShowAsync<DlgLeadEntry>("New Lead", parameters, options);
            var result = await dialog.Result;

            if (result?.Canceled == false)
            {
                var newLead = new LeadItem($"PT {Leads.Count + 1}", "Perusahaan Baru", "Lead");
                Leads.Add(newLead);
            }
        }
        else
        {
            var options = new DialogOptions()
                {
                    MaxWidth = MaxWidth.False, // atau MaxWidth.Large
                    FullWidth = true,
                    CloseButton = false,
                    BackdropClick = false,
                    FullScreen = true,
                    BackgroundClass = "full-width-dialog"
                };
            var parameters = new DialogParameters { ["Title"] = "New Work Order", ["IsMobile"] = IsMobile };
            var dialog = await DialogService.ShowAsync<DlgWorkOrder>("New Work Order", parameters, options);
            var result = await dialog.Result;

            if (result?.Canceled == false)
            {
                var newLead = new LeadItem($"WO {Leads.Count + 1}", "WO Baru", "WO");
                Leads.Add(newLead);
            }
        }
    }

    public async Task OnMoveLeadClicked(LeadItem lead, string title, string newStage, string oldColumnId = "", int oldIndex = -1)
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.False, // atau MaxWidth.Large
                FullWidth = true,
                CloseButton = false,
                BackdropClick = false,
                FullScreen = true,
                BackgroundClass = "full-width-dialog"
            };
        var parameters = new DialogParameters
            {
                ["Title"] = "Update Stage",
                ["IsMobile"] = IsMobile,
                ["Lead"] = lead,
                ["TargetStage"] = newStage
            };
        var dialog = await DialogService.ShowAsync<DlgQualification>("Update Stage", parameters, options);
        var result = await dialog.Result;

        if ((result?.Canceled ?? true) == false)
        {
            await MoveLead(lead, newStage, true);
            StateHasChanged();
            await JS.InvokeVoidAsync("kanbanInterop.initSortable", objRef);
        }
        else
        {
            await InvokeAsync(StateHasChanged);
            if (!string.IsNullOrEmpty(oldColumnId))
            {
                oldIndex = Leads.FindIndex(l => l.ContactMobile == title);
                await JS.InvokeVoidAsync("kanbanInterop.revertItem", title, oldColumnId, oldIndex);
                Snackbar.Add("Update stage is cancelled!");
            }
        }
    }

    async Task MoveLead(LeadItem lead, string newStage, bool force = false)
    {
        if (force)
        {
            lead.LeadStatus = newStage;
        }
        else
        {
            var dialog = await DialogHelper.ShowConfirmation(DialogService, "Confirmation", "Are you sure?");
            if (dialog.Canceled != true)
            {
                lead.LeadStatus = newStage;
            }
        }
    }
    void ResetFilters()
    {
    }

    async Task ExportChart()
    {
        await JSRuntime.InvokeVoidAsync("exportDashboardCharts");
    }


}
