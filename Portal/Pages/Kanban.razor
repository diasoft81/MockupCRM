@page "/kanban/{pipeline?}"
@using CoreNET.Blazor.Shared.Helper
@using Portal.Model
@using Portal.Pages.CRM
@layout WebLayout
@inject IJSRuntime JS
@inject IDialogService DialogService

<PageTitle>Kanban</PageTitle>

<div class="container">
    <div class="mb-4">
        <h2>Sales Kanban Board</h2>
        <p>Gunakan tampilan Kanban ini untuk memonitor dan memindahkan @((pipeline == "sales") ? "leads" : "customer") antar tahapan proses penjualan.</p>
        <button class="button" @onclick="AddLead"><i class="fas fa-plus"></i> Add Lead</button>
    </div>

    <div class="row g-3">
        @foreach (var stage in Stages)
        {
            <div class="col-12 col-md-2">
                <div class="kanban-column" id="@stage.ToLower().Replace(" ", "-")">
                    <h5 class="text-center mb-3">@stage</h5>

                    @foreach (var lead in Leads.Where(l => l.Stage == stage))
                    {
                        <div class="task-card @GetStatusClass(lead)">
                            <strong>@lead.Name</strong>
                            <div class="task-meta mt-2">
                                <span>@lead.Company</span>
                                <span>@lead.Status</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string pipeline { get; set; }
    private string[] Stages
    {
        get
        {
            if (pipeline == "sales")
            {
                return new[] { "Lead", "Qualified", "Survey", "Negotiation", "Won", "Lost" };
            }
            else
            {
                return new[] { "Work Order", "Preparation", "Ready to Go", "In Progress", "Testing", "Done" };
            }
        }
    }

    List<LeadItem> Leads
    {
        get
        {
            if (pipeline == "sales")
            {
                return new()
                    {
                        new LeadItem("Lead 1", "Perusahaan A", "Lead"),
                        new LeadItem("Lead 2", "Perusahaan B", "Lead"),
                        new LeadItem("Lead 3", "Perusahaan C", "Qualified"),
                        new LeadItem("Lead 4", "Perusahaan D", "Negotiation"),
                        new LeadItem("Lead 5", "Perusahaan E", "Lost"),
                        new LeadItem("Lead 6", "Perusahaan F", "Survey"),
                        new LeadItem("Lead 7", "Perusahaan G", "Won")
                    };
            }
            else
            {
                return new()
                    {
                        new LeadItem("Lead 1", "Perusahaan A", "Work Order"),
                        new LeadItem("Lead 2", "Perusahaan B", "In Progress"),
                        new LeadItem("Lead 3", "Perusahaan C", "Preparation"),
                        new LeadItem("Lead 4", "Perusahaan D", "Ready to Go"),
                        new LeadItem("Lead 5", "Perusahaan E", "In Progress"),
                        new LeadItem("Lead 6", "Perusahaan F", "Testing"),
                        new LeadItem("Lead 7", "Perusahaan G", "Done")
                    };
            }

        }
    }

    string GetStatusClass(LeadItem lead) =>
        lead.Status == "Done" ? "done" :
        lead.Status == "Overdue" ? "overdue" : "";

    DotNetObjectReference<Kanban>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("kanbanInterop.initSortable", objRef);
        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public async Task OnLeadMoved(string title, string newStage)
    {
        var lead = Leads.FirstOrDefault(l => l.Name == title);
        if (lead != null && lead.Stage != newStage)
        {
            await OnMoveLeadClicked(lead, newStage);
            StateHasChanged();
        }
    }

    async Task AddLead()
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.False, // atau MaxWidth.Large
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false,
                FullScreen = true,
                BackgroundClass = "full-width-dialog"
            };
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<ComLeadEntry>("Update Stage", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false)
        {
            var newLead = new LeadItem($"Lead {Leads.Count + 1}", "Perusahaan Baru", "Lead");
            Leads.Add(newLead);
        }
    }

    async Task OnMoveLeadClicked(LeadItem lead, string newStage)
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.False, // atau MaxWidth.Large
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false,
                FullScreen = true,
                BackgroundClass = "full-width-dialog"
            };
        var parameters = new DialogParameters { ["Lead"] = lead, ["TargetStage"] = newStage };
        var dialog = await DialogService.ShowAsync<ComQualification>("Qualification", parameters, options);
        var result = await dialog.Result;

        if ((result?.Canceled ?? true) == false)
        {
            await MoveLead(lead, newStage, true);
        }
    }

    async Task MoveLead(LeadItem lead, string newStage, bool force = false)
    {
        if (force)
        {
            lead.Stage = newStage;
        }
        else
        {
            var dialog = await DialogHelper.ShowConfirmation(DialogService, "Confirmation", "Are you sure?");
            if (dialog.Canceled != true)
            {
                lead.Stage = newStage;
            }
        }
    }

}
